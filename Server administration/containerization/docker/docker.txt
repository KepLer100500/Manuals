### Установка в Ubuntu

cat /etc/os-release                                                                  # Информация о дистрибутиве
sudo apt update                                                                      # Обновить списка репозиториев
sudo apt install apt-transport-https ca-certificates curl software-properties-common # Установка доп модулей
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -         # Добавить ключ GPG официального репозитория Docker
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" # Добавить репозиторий Docker в apt
sudo apt update            # Обновить списка репозиториев
apt-cache policy docker-ce # Убедиться, что устанавливаем докер из репозитория докера, а не из другого
sudo apt install docker-ce # Установить докер

### Установка в Raspbian

curl -fsSL https://get.docker.com -o get-docker.sh # Скачать установочный скрипт
sudo sh get-docker.sh                              # Установить

### Установка в CentOS

sudo yum check-update                   # Проверка на доступные обновления
curl -fsSL https://get.docker.com/ | sh # Скачать установочный sh скрипт и запустить его

### Команды Docker

sudo systemctl start docker   # Старт службы
sudo systemctl enable docker  # Добавить службу в автозагрузку
sudo systemctl status docker  # Статус службы
sudo usermod -aG docker $USER # Добавить текущего пользователя в группу docker (чтобы не писать sudo)

docker -v                                     # Версия Docker
docker info                                   # Информация об установленных образах и системе в целом
docker search hello-world                     # Поиск на DockerHub образа "hello-world"
docker pull hello-world                       # Скачать образ с DockerHub
docker run hello-world                        # Запустить образ "hello-world" (или скачать его)
docker images                                 # Просмотр загруженных на компьютер образов
docker ps                                     # Список сейчас запущенных контейнеров
docker ps -a                                  # Общий список контейнеров
docker ps -aq                                 # Общий список контейнеров (только их id)
docker stop 8802a79d0ec2                      # Остановить контейнер по id из docker ps
docker rm 8802a79d0ec2                        # Удалить контейнер по id из docker ps
docker rmi nginx:latest                       # Удалить образ по имени
docker rm -f $(docker ps -aq)                 # Удалить все контейнеры
docker rm $(docker ps -a -q -f status=exited) # удалить все неактивные контейнеры
docker rmi -f $(docker images -q)             # Удалить все образы
docker port static-site                       # Посмотреть какие порты открыты в контейнере

### Ключи docker run
--detach, -d      # позволяет запускать контейнер в фоне и не выводить на экран содержимое потоков ввода-вывода
--entrypoint      # устанавливает или переопределяет используемую по умолчанию команду (и параметры) из docker-образа
--env, -e         # устанавливает переменные окружения КЛЮЧ=ЗНАЧЕНИЕ. Если есть список переменных окружения в файле, тогда использовать --env-file
--ip              # назначает docker-контейнеру IP-адрес, например, --ip=192.168.0.50
--name            # назначает docker-контейнеру имя (--name my-super-container)
--publish, -p     # сопоставляет порт(ы) docker-контейнера порту(ам) на хост системе
--publish-all, -P # откроет доступ к портам, описанным в Dockerfile с помощью директивы EXPOSE
--rm              # автоматически удалить контейнер после завершения его работы (в том числе, при завершении с ошибкой)
--tty, -t         # назначает псевдо-TTY, подключенный к STDIN контейнера
--interactive, -i # если нужно подключиться к оболочке (bash) внутри docker-контейнера для выполнения каких-то действий
--volume, -v      # монтирование тома
--workdir, -w     # устанавливает рабочую директорию внутри docker-контейнера

docker run -d -p 80:80 --name static-site prakhar1989/static-site # Запуск в фоном режиме серевера с nginx и одной страничкой на localhost с открытым 80 портом

docker run -p 5432:5432 -e POSTGRES_HOST_AUTH_METHOD=trust -d --name postgres -v $(pwd):/workspace postgres
# Запустить postgres на порту 5432 с переменной окружения POSTGRES_HOST_AUTH_METHOD=trust в виде службы с подмонтированной дирректорией /workspace

docker run --rm -e POSTGRES_HOST_AUTH_METHOD=trust --name psql --link postgres:postgres -v $(pwd):/workspace postgres psql -h postgres -U postgres -f /workspace/task2-public.sql
# Удаляет после выполнения контейнер psql, связанный с postgres и выполняющий скрипт task2-public.sql

docker run -it --entrypoint bash nginx # Запустить контейнер с заменой точки входа на bash
docker exec -it 8802a79d0ec2 /bin/bash # Запустить интерактивно /bin/bash в контейнере 8802a79d0ec2
docker run -it -p 8888:80 nginx        # Запустить контейнер в интерактивном режиме и перенаправить порт 80 -> 8888
docker run -d -p 8888:80 nginx         # Запустить контейнер в режиме демона с перенаправлением портов
docker run --mount 'type=bind,source=/home/kepler,target=/tmp/volume' -it --entrypoint bash nginx 
# Запуск контейнера в интерактивном режиме с заменой точки входа и монтированием /home/kepler (основная система) в /tmp/volume (контейнер)

docker commit 8802a79d0ec2 newimage:latest # Создать Image с именем newimage_v2:latest из контейнера 8802a79d0ec2
docker build -t myimage:latest .           # Создать Image с именем myimage:latest из локального Dockerfile

docker save -o zookeeper.tar wurstmeister/zookeeper # сохранить образ на диске
docker load -i zookeeper.tar # развернуть образ

### Kafka

# docker-compose.yml для настройки Kafka и Zookeeper

version: '3'
services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181

  kafka:
    image: wurstmeister/kafka:2.12-2.3.0
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


docker-compose up -d
docker-compose down