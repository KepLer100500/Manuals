git --version
git config --global user.name KepLer             # установить глобальное имя пользователя
git config --global user.email kepler007@mail.ru # установить глобальную почту
git config user.name

git init                        # инициализация гита
git add test.html               # добавить файл
git add folder/                 # добавить каталог
git add .                       # добавить все файлы каталога
git add *.html                  # добавить файлы по маске
git add folder/*.html           # добавить файлы по маске внутри определённой папки
git add folder/**/*.html        # добавить файлы по маске внутри определённой папки в которой толпа других папок
git add !test.html              # добавить все файлы кроме одного
git add !*.html                 # добавить все файлы кроме выбранной маски
git status                      # проверить статус файлов
git rm --cached test.html       # выкинуть файл из статуса ожидания коммита
git commit -m "First add files" # коммит в локальное хранилище с добавлением комментария
git log                         # история изменений комитов
git log --oneline               # история изменений комитов в компактном виде
git log --graph                 # история изменений комитов в расширенном виде
git blame 1.py                  # узнать построчно кто куда что писал в этом файле
git diff                        # посмотреть, какие изменения сделали по сравнению с последним коммитом
.gitignore                      # файл с игнорируемыми файлами и папками, создаётся в папке проекта

git checkout ?_id_?     # посмотреть что было с проектом на момент коммита
git checkout master     # вернуться к последним изменениям
git revert ?_id_?       # отменить коммит по id
:wq                     # выйти из vim
git reset ?_id_? --hard # жёстко удалить все коммиты до определённого id и поменять файлы

git branch ?_name_?      # создать новую ветку
git checkout ?_name_?    # перейти на ветку с другим названием
git branch -a            # посмотреть на все ветки проекта
git checkout -b ?_name_? # создать новую ветку и сразу в неё перейти
git merge ?_name_?       # объеденить 2 ветки в одну (находясь в master), создаёт промежуточный, общий коммит
git rebase master        # объединить 2 ветки в одну, другой подход, лепит выбранную ветку в конец ветки master

git remote add origin https://github.com/KepLer100500/python-projects.git # подключиться к удалённому репозиторию
git remote                                                                # посмотреть в каком удалённом репозитории мы находимся
git push -u origin master                                                 # закинуть свои локальные файлы из ветки master в удалённый репозиторий origin
git clone https://github.com/KepLer100500/python-projects.git             # клонтрование удалённого репозитория на свой компьютер
git pull                                                                  # скачать все новые файлы из удалённого репозитория
