class MyThread implements Runnable {
    String thrName;

    MyThread(String thrName) {
        this.thrName = thrName;
    }

    public void run() {
        System.out.println("Run Thread: " + thrName);
        try {
            for(int i=0; i < 10; i++) {
                Thread.sleep(400);
                System.out.println("Thread: " + thrName + ", getted number: " + i);    
            }
        }
        catch(InterruptedException err) {
            System.out.println("Thread is aborted: " + thrName);
        }
        System.out.println("Thread is end work: " + thrName);
    }
}

class UseMyThread {
    public static void runMyThread() {
        MyThread myThr = new MyThread("#1");
        Thread newThr = new Thread(myThr);
        newThr.start(); // My thread work
        // Main Thread work
        for(int i=0;i<50;i++) {
            System.out.print(".");
            try {
                Thread.sleep(10);
            }
            catch(InterruptedException err) {
                System.out.println("Main Thread is aborted!");
            }
        }        
        System.out.println("Main Thread is end work!");
    }
}


class MyThreadUpdated implements Runnable {
    Thread thr;

    MyThreadUpdated(String name) {
        thr = new Thread(this, name);
    }

    public static MyThreadUpdated createAndStartThread(String name) {
        MyThreadUpdated first = new MyThreadUpdated(name);
        first.thr.start();
        return first;
    }

    public void run() {
        System.out.println("Run Thread: " + thr.getName());
        try {
            for(int i=0; i < 10; i++) {
                Thread.sleep(400);
                System.out.println("Thread: " + thr.getName() + ", getted number: " + i);    
            }
        }
        catch(InterruptedException err) {
            System.out.println("Thread is aborted: " + thr.getName());
        }
        System.out.println("Thread is end work: " + thr.getName());
    }
}

class UseMyThreadUpdated {
    public static void runMyThread() {
        MyThreadUpdated myThr1 = MyThreadUpdated.createAndStartThread("#1");
        MyThreadUpdated myThr2 = MyThreadUpdated.createAndStartThread("#2");
        MyThreadUpdated myThr3 = MyThreadUpdated.createAndStartThread("#3");

        for(int i=0;i<50;i++) {
            System.out.print(".");
            try {
                Thread.sleep(30);
            }
            catch(InterruptedException err) {
                System.out.println("Main Thread is aborted!");
            }
        }

        try {
            myThr1.thr.join(); // wait main thread
            System.out.println("Thread #1 is joined!");
            myThr2.thr.join();
            System.out.println("Thread #2 is joined!");
            myThr3.thr.join();
            System.out.println("Thread #3 is joined!");
        } catch(InterruptedException err) {
            System.out.println(err);
        }
        
        System.out.println("Main Thread is end work!");
    }
}


class MyThreadExt extends Thread {
    MyThreadExt(String name) {
        super(name); // Thread(String threadName)
    }

    public static MyThreadExt createAndStartThread(String name) {
        MyThreadExt myThr = new MyThreadExt(name);
        myThr.start();
        return myThr;
    }

    public void run() {
        System.out.println("Run Thread: " + getName());
        try {
            for(int i=0; i < 10; i++) {
                Thread.sleep(400);
                System.out.println("Thread: " + getName() + ", getted number: " + i);    
            }
        }
        catch(InterruptedException err) {
            System.out.println("Thread is aborted: " + getName());
        }
        System.out.println("Thread is end work: " + getName());
    }
}

class UseMyThreadExt {
    public static void runMyThread() {
        MyThreadExt mte = MyThreadExt.createAndStartThread("#1");
        for(int i=0;i<50;i++) {
            System.out.print(".");
            try {
                Thread.sleep(30);
            }
            catch(InterruptedException err) {
                System.out.println("Main Thread is aborted!");
            }
        }        
        System.out.println("Main Thread is end work!");
    }
}


class MyThreadPriority implements Runnable {
    Thread thr;
    int counter;
    static boolean stop = false;
    static String currentName;

    MyThreadPriority(String name) {
        thr = new Thread(this, name);
        currentName = name;
        counter = 0;
    }

    public void run() {
        System.out.println("Run Thread: " + thr.getName());
        do {
            counter++;
            if(currentName.compareTo(thr.getName()) != 0) {
                currentName = thr.getName();
            }
        } while(stop == false && counter < 10000000);
        stop = true;
        System.out.println("Stop Thread: " + thr.getName());
    }
}

class UseMyThreadPriority {
    public static void runMyThread() {
        MyThreadPriority thrPr1 = new MyThreadPriority("#1 Hith");
        MyThreadPriority thrPr2 = new MyThreadPriority("#2 Low");
        MyThreadPriority thrPr3 = new MyThreadPriority("#3");
        MyThreadPriority thrPr4 = new MyThreadPriority("#4");
        MyThreadPriority thrPr5 = new MyThreadPriority("#5");
        
        thrPr1.thr.setPriority(Thread.NORM_PRIORITY + 2);
        thrPr2.thr.setPriority(Thread.NORM_PRIORITY - 2);

        thrPr1.thr.start();
        thrPr2.thr.start();
        thrPr3.thr.start();
        thrPr4.thr.start();
        thrPr5.thr.start();
        
        try {
            thrPr1.thr.join();
            thrPr2.thr.join();
            thrPr3.thr.join();
            thrPr4.thr.join();
            thrPr5.thr.join();
        }
        catch(InterruptedException err) {
            System.out.println("Main Thread is aborted!");
        }
        System.out.println("Main Thread is end work!");
        System.out.println("Thread #1 counter: " + thrPr1.counter);
        System.out.println("Thread #2 counter: " + thrPr2.counter);
        System.out.println("Thread #3 counter: " + thrPr3.counter);
        System.out.println("Thread #4 counter: " + thrPr4.counter);
        System.out.println("Thread #5 counter: " + thrPr5.counter);
    }
}


class SumArray {
    private int sum;

    //synchronized int mySum(int[] nums) { // another way to synchronize
    int mySum(int[] nums) {
        sum = 0;
        for(int i=0; i < nums.length; i++) {
            sum += nums[i];
            System.out.println("Sum " + Thread.currentThread().getName() + " is: " + sum);
        }
        try {
            Thread.sleep(10);
        } catch(InterruptedException err) {
            System.out.println("Thread is break!");
        }
        return sum;
    }
}

class MyThreadSum implements Runnable {
    Thread thr;
    static SumArray sumArray = new SumArray();
    int a[]; // tmp array
    int answer;

    MyThreadSum(String name, int[] nums) {
        thr = new Thread(this, name);
        a = nums;
    }

    public static MyThreadSum createAndStartThread(String name, int[] nums) {
        MyThreadSum myThreadSum = new MyThreadSum(name, nums);
        myThreadSum.thr.start();
        return myThreadSum;
    }

    public void run() {
        int sum;
        System.out.println("Run Thread: " + thr.getName());
        synchronized(sumArray) { // synchronize object sumArray
            answer = sumArray.mySum(a);
        }
        System.out.println("Sum Thread: " + answer);
        System.out.println("Stop Thread: " + thr.getName());
    }
}

class UseMyThreadSum {
    public static void runMyThread() {
        int nums[] = {1, 2, 3, 4, 5};
        MyThreadSum thrPr1 = MyThreadSum.createAndStartThread("#1", nums);
        MyThreadSum thrPr2 = MyThreadSum.createAndStartThread("#2", nums);
        
        try {
            thrPr1.thr.join();
            thrPr2.thr.join();
        }
        catch(InterruptedException err) {
            System.out.println("Main Thread is aborted!");
        }
    }
}


public class Threads {
    private static void parserBigString() {
        // to_clob("ssss")||
        String bigString
        //bigString

        System.out.println("Original length: " + bigString.length());
        String part = "", newStr = "";
        while(bigString.length() > 3900) {
            part = bigString.substring(0, 3900);
            newStr += "to_clob('" + part + "')'||";
            bigString = bigString.substring(3900, bigString.length());
        }
        if(bigString.length() > 0) {
            part = bigString.substring(0, bigString.length());
            newStr += "to_clob('" + part + "')";
        }
        System.out.println(newStr);

    }

    public static void main(String[] args) {
        //UseMyThread.runMyThread();

        //UseMyThreadUpdated.runMyThread();

        //UseMyThreadExt.runMyThread();

        //UseMyThreadPriority.runMyThread();

        //UseMyThreadSum.runMyThread();

        parserBigString();

    }
}